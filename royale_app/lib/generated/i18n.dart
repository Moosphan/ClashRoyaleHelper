import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get appName => "RoyaleBox";
  String get clanRankTopClanTitle => "Top Clans";
  String get homeCardsTitle => "Cards";
  String get homeClanRankTitle => "Clans";
  String get homeNewsTitle => "News";
  String get homePlayerRankTitle => "Players";
  String get homeTournamentTitle => "Matches";
  String get locationTitle => "Select the Area";
  String get playerDetailBasicInfo => "Basic Stats";
  String get playerDetailBattleRecord => "Battle Stats";
  String get playerDetailCardWins => "Cards Won";
  String get playerDetailCardsStats => "Cards Stats";
  String get playerDetailChallengeStats => "Challenge Stats";
  String get playerDetailClanCardsCollected => "Clan Cards Collected";
  String get playerDetailClanWarStats => "Clan War Stats";
  String get playerDetailClickCopy => "Click to copy";
  String get playerDetailCollectedCards => "Cards Found";
  String get playerDetailCurrentDeck => "Current Deck";
  String get playerDetailCurrentFavoriteCard => "Current Favorite Card";
  String get playerDetailCurrentTrophies => "Current Trophies";
  String get playerDetailHighestTrophies => "Highest Trophies";
  String get playerDetailMaxWins => "Max Wins";
  String get playerDetailNext => "Next";
  String get playerDetailPocketCards => "Collected Cards";
  String get playerDetailTag => "Tag";
  String get playerDetailThreeCrownWins => "Three Crown Wins";
  String get playerDetailTotalDonations => "Total Donations";
  String get playerDetailTournamentStats => "Tournament Stats";
  String get playerDetailTournamentTimes => "Tournaments Played";
  String get playerDetailTournamentWins => "Tournaments Wins";
  String get playerDetailUpcomingChests => "Upcoming chests";
  String get playerDetailWarDayWins => "War Day Wins";
  String get playerDetailWinRate => "Win Rate";
  String get playerDetailWins => "wins";
  String get playerRankTopPlayerTitle => "Top Players";
  String get roleCoLeader => "Co-leader";
  String get roleElder => "Elder";
  String get roleLeader => "Leader";
  String get roleMember => "Member";
  String get scanMore => "View More";
  String get unknownText => "Unknown";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get homeClanRankTitle => "部落";
  @override
  String get playerDetailCollectedCards => "已拥有的卡牌数";
  @override
  String get playerDetailClanCardsCollected => "累计收集的部落卡牌";
  @override
  String get playerDetailMaxWins => "最多胜场";
  @override
  String get homeCardsTitle => "卡组";
  @override
  String get playerDetailCurrentTrophies => "当前奖杯";
  @override
  String get playerDetailTournamentTimes => "参加的锦标赛";
  @override
  String get playerDetailTotalDonations => "累计捐献";
  @override
  String get playerDetailTournamentWins => "锦标赛胜场";
  @override
  String get homeTournamentTitle => "锦标赛";
  @override
  String get playerDetailClickCopy => "点击复制";
  @override
  String get playerDetailHighestTrophies => "最高奖杯";
  @override
  String get playerDetailBattleRecord => "对战记录";
  @override
  String get homePlayerRankTitle => "玩家";
  @override
  String get playerDetailCurrentDeck => "正在使用的卡组";
  @override
  String get scanMore => "查看更多";
  @override
  String get playerDetailTag => "标签";
  @override
  String get roleCoLeader => "副首领";
  @override
  String get playerDetailWins => "累计胜场";
  @override
  String get unknownText => "未知";
  @override
  String get playerDetailBasicInfo => "基本统计";
  @override
  String get playerDetailTournamentStats => "锦标赛数据";
  @override
  String get playerDetailPocketCards => "已拥有的卡牌";
  @override
  String get roleElder => "长老";
  @override
  String get appName => "皇室数据盒子";
  @override
  String get playerDetailCardWins => "赢得卡牌数";
  @override
  String get clanRankTopClanTitle => "顶级部落";
  @override
  String get playerDetailThreeCrownWins => "三皇冠胜利次数";
  @override
  String get playerDetailWinRate => "胜率统计";
  @override
  String get locationTitle => "选择一个地区";
  @override
  String get playerDetailCardsStats => "卡牌统计";
  @override
  String get playerDetailClanWarStats => "部落战统计";
  @override
  String get roleMember => "成员";
  @override
  String get playerDetailChallengeStats => "挑战赛数据";
  @override
  String get playerDetailWarDayWins => "战斗日胜场";
  @override
  String get playerDetailNext => "下一个";
  @override
  String get homeNewsTitle => "资讯";
  @override
  String get playerDetailUpcomingChests => "即将来临的宝箱";
  @override
  String get playerRankTopPlayerTitle => "顶级玩家";
  @override
  String get playerDetailCurrentFavoriteCard => "最近常用卡牌";
  @override
  String get roleLeader => "首领";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
